# Переменные окружения загружаются через параметр --env-file в командной строке

services:
  rabbitmq:
    restart: always
    ports: []  # Закрываем внешние порты в продакшене

  unie-client:
    build:
      context: ../services/unie
      dockerfile: Dockerfile
      target: runner
      args: 
        - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
        - NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY}
    restart: always
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASSWORD:-password}@rabbitmq:5672
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY}
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "3000"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - rabbitmq
    networks:
      - app_network
    ports: []  # Закрываем внешние порты в продакшене

  balance-service:
    build:
      context: ../services/balance-service
      dockerfile: Dockerfile
      target: production
    restart: always
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASSWORD:-password}@rabbitmq:5672
    ports: []  # Закрываем внешние порты в продакшене
    depends_on:
      - rabbitmq
    networks:
      - app_network

  smtp-service:
    build:
      context: ../services/smtp-service
      dockerfile: Dockerfile
    restart: always
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASSWORD:-password}@rabbitmq:5672
      - SMTP_HOST=${SMTP_HOST:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_FROM=${SMTP_FROM:-noreply@unie.com}
      - FRONTEND_URL=${FRONTEND_URL}
    ports: []  # Закрываем внешние порты в продакшене
    depends_on:
      - rabbitmq
    networks:
      - app_network

  nginx:
    build:
      context: ../services/nginx
      dockerfile: Dockerfile
    volumes:
      - ../services/nginx/conf.d:/etc/nginx/conf.d
      - ../services/nginx/logs:/var/log/nginx
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /etc/ssl/private:/etc/ssl/private:ro
    ports:
      - "80:80"
      - "443:443"
    dns:
      - 8.8.8.8
      - 8.8.4.4
    depends_on:
      unie-client:
        condition: service_started
      admin:
        condition: service_started
    restart: always
    networks:
      - app_network
