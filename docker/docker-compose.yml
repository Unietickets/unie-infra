version: '3.8'

# Загрузка всех переменных окружения из файла .env
env_file: ./.env

x-init-dirs: &init-dirs
  condition: service_healthy
  command: ./init-docker-dirs.sh

services:
  minio:
    image: bitnami/minio:latest
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - minio_storage:/data
    environment:
      - MINIO_ROOT_USER=${S3_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${S3_ROOT_PASSWORD}
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    networks:
      - app_network

  rabbitmq:
    image: rabbitmq:3-management
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-admin}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-password}
    ports:
      - '5672:5672'   # AMQP протокол
      - '15672:15672' # Веб-интерфейс управления
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    networks:
      - app_network

  unie-client:
    build:
      context: ../services/unie
      dockerfile: Dockerfile
      target: runner
    environment:
      - NODE_ENV=development
      - DATABASE_URL=${DATABASE_URL}
      - DATABASE_HOST=postgres
      - DATABASE_PORT=${DATABASE_PORT}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${DATABASE_NAME}
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASSWORD:-password}@rabbitmq:5672
    ports:
      - "3000:3000"
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "3000"]
      interval: 10s
      timeout: 5s
      retries: 5

  balance-service:
    build:
      context: ../services/balance-service
      dockerfile: Dockerfile
      target: development
    volumes:
      - ../services/balance-service:/usr/src/app
      - /usr/src/app/node_modules
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        while ! nc -z postgres 5432; do
          sleep 1
        done &&
        echo 'Database is up!' &&
        echo 'Waiting for RabbitMQ...' &&
        while ! nc -z rabbitmq 5672; do
          sleep 1
        done &&
        echo 'RabbitMQ is up!' &&
        npx prisma generate &&
        npm run start:dev
      "
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASSWORD:-password}@rabbitmq:5672
      - NODE_ENV=development
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - app_network

  smtp-service:
    build:
      context: ../services/smtp-service
      dockerfile: Dockerfile
    depends_on:
      - postgres
      - rabbitmq
    environment:
      - NODE_ENV=docker
      - DATABASE_URL=${DATABASE_URL}
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASSWORD:-password}@rabbitmq:5672
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_USER=${SMTP_USER:-example@mail.ru}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-password}
      - SMTP_FROM=${SMTP_FROM:-noreply@unie.com}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
    ports:
      - "3002:3002"
    networks:
      - app_network

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/docker-data/postgres
      o: bind
  minio_storage:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/docker-data/minio
      o: bind
  rabbitmq_data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/docker-data/rabbitmq
      o: bind

networks:
  app_network:
    driver: bridge
