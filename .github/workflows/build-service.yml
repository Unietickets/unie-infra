name: Build Specific Service

on:
  workflow_dispatch:
    inputs:
      service:
        description: '–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–±–æ—Ä–∫–∏'
        required: true
        type: choice
        options:
          - balance-service
          - smtp-service
          - unie
          - unie-admin
          - nginx
      environment:
        description: '–û–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è —Å–±–æ—Ä–∫–∏'
        required: true
        type: choice
        options:
          - development
          - production
        default: 'development'
      push_image:
        description: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞–∑ –≤ Docker Hub'
        required: true
        type: boolean
        default: false

jobs:
  build-service:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        if: ${{ github.event.inputs.push_image == 'true' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Verify required secrets
        run: |
          echo "üîç Checking required GitHub secrets..."
          
          if [ -z "${{ secrets.DATABASE_URL }}" ]; then
            echo "::error::DATABASE_URL secret is required but not set"
            echo "::error::Please add DATABASE_URL to repository secrets"
            exit 1
          fi
          
          if [ -z "${{ secrets.SHADOW_DATABASE_URL }}" ]; then
            echo "::warning::SHADOW_DATABASE_URL secret is not set - Prisma migrations may fail"
            echo "::warning::Please add SHADOW_DATABASE_URL to repository secrets for Prisma migrations"
          fi
          
          echo "‚úÖ Required secrets verified"
          echo "üìù Optional Stripe secrets:"
          echo "   NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: $(test -n "${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}" && echo '‚úÖ Set' || echo '‚ùå Not set')"
          echo "   STRIPE_SECRET_KEY: $(test -n "${{ secrets.STRIPE_SECRET_KEY }}" && echo '‚úÖ Set' || echo '‚ùå Not set')"
          
          if [ -z "${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}" ] || [ -z "${{ secrets.STRIPE_SECRET_KEY }}" ]; then
            echo "‚ö†Ô∏è  Stripe secrets are not set - payment features will not work"
            echo "   Add these secrets if you need Stripe payment functionality"
          fi
          
      - name: Set environment variables from secrets
        id: set-env
        run: |
          # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ GitHub Secrets –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV
          echo "SHADOW_DATABASE_URL=${{ secrets.SHADOW_DATABASE_URL }}" >> $GITHUB_ENV
          echo "NODE_ENV=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}" >> $GITHUB_ENV
          echo "STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}" >> $GITHUB_ENV
          
          # –°–æ–∑–¥–∞–µ–º build args –¥–ª—è Docker –±–∏–ª–¥–∞
          BUILD_ARGS="DATABASE_URL=${{ secrets.DATABASE_URL }} SHADOW_DATABASE_URL=${{ secrets.SHADOW_DATABASE_URL }} NODE_ENV=${{ github.event.inputs.environment }}"
          
          # –î–æ–±–∞–≤–ª—è–µ–º Stripe –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
          if [ -n "${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}" ]; then
            BUILD_ARGS="$BUILD_ARGS NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}"
          fi
          
          if [ -n "${{ secrets.STRIPE_SECRET_KEY }}" ]; then
            BUILD_ARGS="$BUILD_ARGS STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}"
          fi
          
          echo "BUILD_ARGS=$BUILD_ARGS" >> $GITHUB_ENV
          
          echo "Environment variables configured successfully"
          echo "Available env vars: DATABASE_URL, SHADOW_DATABASE_URL, NODE_ENV"
          echo "Stripe vars: $(test -n "${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}" && test -n "${{ secrets.STRIPE_SECRET_KEY }}" && echo "NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY, STRIPE_SECRET_KEY" || echo "not available")"
          echo "Build args set for Docker build"
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
          echo "Checking environment variables:"
          echo "DATABASE_URL is set: $(test -n "$DATABASE_URL" && echo "YES" || echo "NO")"
          echo "STRIPE_SECRET_KEY is set: $(test -n "$STRIPE_SECRET_KEY" && echo "YES" || echo "NO")"
          echo "NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY is set: $(test -n "$NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY" && echo "YES" || echo "NO")"

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./services/${{ github.event.inputs.service }}
          push: ${{ github.event.inputs.push_image == 'true' }}
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/unie-${{ github.event.inputs.service }}:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/unie-${{ github.event.inputs.service }}:${{ github.sha }}
          build-args: |
            NODE_ENV=${{ github.event.inputs.environment }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            SHADOW_DATABASE_URL=${{ secrets.SHADOW_DATABASE_URL }}
            ${{ env.BUILD_ARGS }}
          target: ${{ env.BUILD_TARGET }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/unie-${{ github.event.inputs.service }}:buildcache
          cache-to: ${{ github.event.inputs.push_image == 'true' && format('type=registry,ref={0}/unie-{1}:buildcache,mode=max', secrets.DOCKER_HUB_USERNAME, github.event.inputs.service) || '' }}

      - name: Show build result
        run: |
          echo "–°–µ—Ä–≤–∏—Å ${{ github.event.inputs.service }} —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω –¥–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ${{ github.event.inputs.environment }}"
          if [ "${{ github.event.inputs.push_image }}" == "true" ]; then
            echo "–û–±—Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Docker Hub: ${{ secrets.DOCKER_HUB_USERNAME }}/unie-${{ github.event.inputs.service }}:latest"
          else
            echo "–û–±—Ä–∞–∑ –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Docker Hub"
          fi
