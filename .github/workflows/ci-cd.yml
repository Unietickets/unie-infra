name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:
    inputs:
      services:
        description: 'Сервисы для пересборки'
        required: false
        default: 'all'
        type: string

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      any_changed: ${{ steps.set-matrix.outputs.any_changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Detect changed services
        id: set-matrix
        run: |
          # Если указаны конкретные сервисы через workflow_dispatch
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ "${{ github.event.inputs.services }}" != "all" ]; then
            SERVICES=$(echo "${{ github.event.inputs.services }}" | tr ',' ' ')
            CHANGED_SERVICES=()
            
            for SERVICE in $SERVICES; do
              if [ -d "services/$SERVICE" ]; then
                CHANGED_SERVICES+=("$SERVICE")
              fi
            done
            
            if [ ${#CHANGED_SERVICES[@]} -eq 0 ]; then
              echo "Не найдены указанные сервисы"
              echo "matrix={\"service\":[]}" >> $GITHUB_OUTPUT
              echo "any_changed=false" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            JSON_ARRAY=$(printf '"%s",' "${CHANGED_SERVICES[@]}" | sed 's/,$//')
            echo "matrix={\"service\":[$JSON_ARRAY]}" >> $GITHUB_OUTPUT
            echo "any_changed=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Автоматическое определение измененных сервисов
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            BASE_SHA=${{ github.event.pull_request.base.sha }}
            HEAD_SHA=${{ github.event.pull_request.head.sha }}
          else
            BASE_SHA=$(git rev-parse HEAD~1)
            HEAD_SHA=$(git rev-parse HEAD)
          fi
          
          CHANGED_SERVICES=()
          
          # Проверка изменений в docker-конфигурации
          if git diff --name-only $BASE_SHA $HEAD_SHA | grep -q "^docker/"; then
            CHANGED_SERVICES+=("docker")
          fi
          
          # Проверка изменений в сервисах
          for SERVICE_DIR in services/*; do
            if [ -d "$SERVICE_DIR" ]; then
              SERVICE=$(basename $SERVICE_DIR)
              if git diff --name-only $BASE_SHA $HEAD_SHA | grep -q "^services/$SERVICE/"; then
                CHANGED_SERVICES+=("$SERVICE")
              fi
            fi
          done
          
          # Если нет изменений, выходим
          if [ ${#CHANGED_SERVICES[@]} -eq 0 ]; then
            echo "Нет изменений в сервисах"
            echo "matrix={\"service\":[]}" >> $GITHUB_OUTPUT
            echo "any_changed=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Формируем JSON для matrix
          JSON_ARRAY=$(printf '"%s",' "${CHANGED_SERVICES[@]}" | sed 's/,$//')
          echo "matrix={\"service\":[$JSON_ARRAY]}" >> $GITHUB_OUTPUT
          echo "any_changed=true" >> $GITHUB_OUTPUT

  build:
    needs: detect-changes
    if: needs.detect-changes.outputs.any_changed == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./services/${{ matrix.service }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/unie-${{ matrix.service }}:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/unie-${{ matrix.service }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/unie-${{ matrix.service }}:buildcache
          cache-to: ${{ github.event_name != 'pull_request' && format('type=registry,ref={0}/unie-{1}:buildcache,mode=max', secrets.DOCKER_HUB_USERNAME, matrix.service) || '' }}

  deploy:
    needs: build
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /unie-infra
            git pull
            git submodule update --init --recursive
            docker compose -f docker/docker-compose.yml -f docker/docker-compose.prod.yml --env-file docker/.env.production pull
            docker compose -f docker/docker-compose.yml -f docker/docker-compose.prod.yml --env-file docker/.env.production up -d
