name: Build Specific Service

on:
  workflow_dispatch:
    inputs:
      service:
        description: 'Сервис для сборки'
        required: true
        type: choice
        options:
          - balance-service
          - smtp-service
          - unie
          - unie-admin
          - nginx
      environment:
        description: 'Окружение для сборки'
        required: true
        type: choice
        options:
          - development
          - production
        default: 'development'
      push_image:
        description: 'Отправить образ в Docker Hub'
        required: true
        type: boolean
        default: false

jobs:
  build-service:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        if: ${{ github.event.inputs.push_image == 'true' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Set build target
        id: set-target
        run: |
          if [ "${{ github.event.inputs.service }}" == "balance-service" ]; then
            if [ "${{ github.event.inputs.environment }}" == "development" ]; then
              echo "BUILD_TARGET=development" >> $GITHUB_ENV
            else
              echo "BUILD_TARGET=production" >> $GITHUB_ENV
            fi
          else
            # Для других сервисов, если есть специфические target'ы
            echo "BUILD_TARGET=" >> $GITHUB_ENV
          fi
          
      - name: Load environment variables
        id: load-env
        run: |
          if [ "${{ github.event.inputs.environment }}" == "development" ]; then
            ENV_FILE="./docker/.env.development"
          else
            ENV_FILE="./docker/.env.production"
          fi
          
          echo "Using environment file: $ENV_FILE"
          
          if [ -f "$ENV_FILE" ]; then
            # Создаем файл с переменными окружения для Docker build
            echo "ENV_FILE_CONTENT<<EOF" >> $GITHUB_ENV
            cat "$ENV_FILE" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            
            # Преобразуем переменные окружения в формат для build-args
            echo "BUILD_ARGS=$(grep -v '^#' "$ENV_FILE" | sed '/^$/d' | sed 's/^/--build-arg /' | tr '\n' ' ' | sed 's/=/=\\"/' | sed 's/$/ /g' | sed 's/ $//' | sed 's/ /\\"/g')" >> $GITHUB_ENV
          else
            echo "::warning::Environment file $ENV_FILE not found"
            echo "BUILD_ARGS=" >> $GITHUB_ENV
          fi

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./services/${{ github.event.inputs.service }}
          push: ${{ github.event.inputs.push_image == 'true' }}
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/unie-${{ github.event.inputs.service }}:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/unie-${{ github.event.inputs.service }}:${{ github.sha }}
          build-args: |
            NODE_ENV=${{ github.event.inputs.environment }}
            ${{ env.ENV_FILE_CONTENT }}
          target: ${{ env.BUILD_TARGET }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/unie-${{ github.event.inputs.service }}:buildcache
          cache-to: ${{ github.event.inputs.push_image == 'true' && format('type=registry,ref={0}/unie-{1}:buildcache,mode=max', secrets.DOCKER_HUB_USERNAME, github.event.inputs.service) || '' }}

      - name: Show build result
        run: |
          echo "Сервис ${{ github.event.inputs.service }} успешно собран для окружения ${{ github.event.inputs.environment }}"
          if [ "${{ github.event.inputs.push_image }}" == "true" ]; then
            echo "Образ отправлен в Docker Hub: ${{ secrets.DOCKER_HUB_USERNAME }}/unie-${{ github.event.inputs.service }}:latest"
          else
            echo "Образ не был отправлен в Docker Hub"
          fi
